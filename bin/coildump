#!/usr/bin/env python

import sys
from optparse import OptionParser
import coil

class AttrError(Exception):
    pass

def parse_attrs(attrs, allow_path):
    parsed = []

    if attrs:
        for attr in attrs:
            if ':' in attr:
                key, value = attr.split(':', 1)
            elif '=' in attr:
                key, value = attr.split('=', 1)
            else:
                raise AttrError("Invalid key:value pair. '%s'" % attr)

            if not allow_path and '.' in key:
                raise AttrError("Character '.' not allowed in '%s'" % key)

            parsed.append((key, value))

    return parsed

def parse_options():
    parser = OptionParser("Usage: %prog [options] file1.coil [coil2.coil...]")

    parser.add_option("-d", "--default", dest="defaults", action="append",
            help="A key:value pair to use as a default value")
    parser.add_option("-a", "--attribute", dest="attrs", action="append",
            help="A path.key:value pair to add add to the coil")

    options, args = parser.parse_args()

    try:
        options.defaults = parse_attrs(options.defaults, False)
    except AttrError, ex:
        parser.error("Invalid --default: %s" % ex)

    try:
        options.attrs = parse_attrs(options.attrs, True)
    except AttrError, ex:
        parser.error("Invalid --attribute: %s" % ex)

    if not args:
        parser.error("At least one coil file is required!")

    return options, args

def main():
    options, coil_files = parse_options()

    for coil_file in coil_files:
        try:
            parsed = coil.parse_file(coil_file, expand=False)
            for key, val in options.attrs:
                parsed[key] = val
            parsed.expand(defaults=dict(options.defaults))
            print parsed
        except Exception, ex:
            sys.stderr.write("Error in %s: %s\n" % (coil_file, ex))
            sys.exit(1)

if __name__ == '__main__':
    main()
